{"id":"cfuy","dependencies":[{"name":"/Users/sakaguchiyuuki/work/github/threejs-dot/package.json","includedInParent":true,"mtime":1665889908950}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RGBShiftShader = void 0;\n\n/**\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\nconst RGBShiftShader = {\n  uniforms: {\n    'tDiffuse': {\n      value: null\n    },\n    'amount': {\n      value: 0.005\n    },\n    'angle': {\n      value: 0.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  \"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader:\n  /* glsl */\n  \"\\n\\n\\t\\tuniform sampler2D tDiffuse;\\n\\t\\tuniform float amount;\\n\\t\\tuniform float angle;\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec2 offset = amount * vec2( cos(angle), sin(angle));\\n\\t\\t\\tvec4 cr = texture2D(tDiffuse, vUv + offset);\\n\\t\\t\\tvec4 cga = texture2D(tDiffuse, vUv);\\n\\t\\t\\tvec4 cb = texture2D(tDiffuse, vUv - offset);\\n\\t\\t\\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\\n\\n\\t\\t}\"\n};\nexports.RGBShiftShader = RGBShiftShader;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"js/RGBAEffect.js","original":{"line":1,"column":0}},{"generated":{"line":9,"column":0},"source":"js/RGBAEffect.js","original":{"line":2,"column":0}},{"generated":{"line":10,"column":0},"source":"js/RGBAEffect.js","original":{"line":3,"column":0}},{"generated":{"line":11,"column":0},"source":"js/RGBAEffect.js","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"js/RGBAEffect.js","original":{"line":5,"column":0}},{"generated":{"line":13,"column":0},"source":"js/RGBAEffect.js","original":{"line":6,"column":0}},{"generated":{"line":14,"column":0},"source":"js/RGBAEffect.js","original":{"line":7,"column":0}},{"generated":{"line":15,"column":0},"source":"js/RGBAEffect.js","original":{"line":8,"column":0}},{"generated":{"line":16,"column":0},"source":"js/RGBAEffect.js","original":{"line":9,"column":0}},{"generated":{"line":17,"column":0},"source":"js/RGBAEffect.js","original":{"line":11,"column":0}},{"name":"RGBShiftShader","generated":{"line":17,"column":6},"source":"js/RGBAEffect.js","original":{"line":11,"column":6}},{"generated":{"line":17,"column":20},"source":"js/RGBAEffect.js","original":{"line":11,"column":20}},{"generated":{"line":17,"column":23},"source":"js/RGBAEffect.js","original":{"line":11,"column":23}},{"name":"uniforms","generated":{"line":18,"column":0},"source":"js/RGBAEffect.js","original":{"line":13,"column":2}},{"name":"uniforms","generated":{"line":18,"column":2},"source":"js/RGBAEffect.js","original":{"line":13,"column":2}},{"generated":{"line":18,"column":10},"source":"js/RGBAEffect.js","original":{"line":13,"column":10}},{"generated":{"line":18,"column":12},"source":"js/RGBAEffect.js","original":{"line":13,"column":12}},{"generated":{"line":19,"column":0},"source":"js/RGBAEffect.js","original":{"line":15,"column":4}},{"generated":{"line":19,"column":16},"source":"js/RGBAEffect.js","original":{"line":15,"column":16}},{"name":"value","generated":{"line":20,"column":0},"source":"js/RGBAEffect.js","original":{"line":15,"column":18}},{"name":"value","generated":{"line":20,"column":6},"source":"js/RGBAEffect.js","original":{"line":15,"column":18}},{"generated":{"line":20,"column":11},"source":"js/RGBAEffect.js","original":{"line":15,"column":23}},{"generated":{"line":20,"column":13},"source":"js/RGBAEffect.js","original":{"line":15,"column":25}},{"generated":{"line":21,"column":0},"source":"js/RGBAEffect.js","original":{"line":15,"column":16}},{"generated":{"line":21,"column":5},"source":"js/RGBAEffect.js","original":{"line":13,"column":12}},{"generated":{"line":22,"column":0},"source":"js/RGBAEffect.js","original":{"line":16,"column":4}},{"generated":{"line":22,"column":14},"source":"js/RGBAEffect.js","original":{"line":16,"column":14}},{"name":"value","generated":{"line":23,"column":0},"source":"js/RGBAEffect.js","original":{"line":16,"column":16}},{"name":"value","generated":{"line":23,"column":6},"source":"js/RGBAEffect.js","original":{"line":16,"column":16}},{"generated":{"line":23,"column":11},"source":"js/RGBAEffect.js","original":{"line":16,"column":21}},{"generated":{"line":23,"column":13},"source":"js/RGBAEffect.js","original":{"line":16,"column":23}},{"generated":{"line":24,"column":0},"source":"js/RGBAEffect.js","original":{"line":16,"column":14}},{"generated":{"line":24,"column":5},"source":"js/RGBAEffect.js","original":{"line":13,"column":12}},{"generated":{"line":25,"column":0},"source":"js/RGBAEffect.js","original":{"line":17,"column":4}},{"generated":{"line":25,"column":13},"source":"js/RGBAEffect.js","original":{"line":17,"column":13}},{"name":"value","generated":{"line":26,"column":0},"source":"js/RGBAEffect.js","original":{"line":17,"column":15}},{"name":"value","generated":{"line":26,"column":6},"source":"js/RGBAEffect.js","original":{"line":17,"column":15}},{"generated":{"line":26,"column":11},"source":"js/RGBAEffect.js","original":{"line":17,"column":20}},{"generated":{"line":26,"column":13},"source":"js/RGBAEffect.js","original":{"line":17,"column":22}},{"generated":{"line":27,"column":0},"source":"js/RGBAEffect.js","original":{"line":17,"column":13}},{"generated":{"line":28,"column":0},"source":"js/RGBAEffect.js","original":{"line":13,"column":12}},{"generated":{"line":28,"column":3},"source":"js/RGBAEffect.js","original":{"line":11,"column":23}},{"name":"vertexShader","generated":{"line":29,"column":0},"source":"js/RGBAEffect.js","original":{"line":21,"column":2}},{"name":"vertexShader","generated":{"line":29,"column":2},"source":"js/RGBAEffect.js","original":{"line":21,"column":2}},{"generated":{"line":29,"column":14},"source":"js/RGBAEffect.js","original":{"line":21,"column":14}},{"generated":{"line":30,"column":0},"source":"js/RGBAEffect.js","original":{"line":21,"column":16}},{"generated":{"line":31,"column":0},"source":"js/RGBAEffect.js","original":{"line":21,"column":14}},{"generated":{"line":31,"column":159},"source":"js/RGBAEffect.js","original":{"line":11,"column":23}},{"name":"fragmentShader","generated":{"line":32,"column":0},"source":"js/RGBAEffect.js","original":{"line":32,"column":2}},{"name":"fragmentShader","generated":{"line":32,"column":2},"source":"js/RGBAEffect.js","original":{"line":32,"column":2}},{"generated":{"line":32,"column":16},"source":"js/RGBAEffect.js","original":{"line":32,"column":16}},{"generated":{"line":33,"column":0},"source":"js/RGBAEffect.js","original":{"line":32,"column":18}},{"generated":{"line":34,"column":0},"source":"js/RGBAEffect.js","original":{"line":32,"column":16}},{"generated":{"line":35,"column":0},"source":"js/RGBAEffect.js","original":{"line":11,"column":23}},{"generated":{"line":35,"column":1},"source":"js/RGBAEffect.js","original":{"line":11,"column":0}}],"sources":{"js/RGBAEffect.js":"/**\n * RGB Shift Shader\n * Shifts red and blue channels from center in opposite directions\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n * by Tom Butterworth / http://kriss.cx/tom/\n *\n * amount: shift distance (1 is width of input)\n * angle: shift angle in radians\n */\n\nconst RGBShiftShader = {\n\n  uniforms: {\n\n    'tDiffuse': { value: null },\n    'amount': { value: 0.005 },\n    'angle': { value: 0.0 }\n\n  },\n\n  vertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n  fragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform float amount;\n\t\tuniform float angle;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec2 offset = amount * vec2( cos(angle), sin(angle));\n\t\t\tvec4 cr = texture2D(tDiffuse, vUv + offset);\n\t\t\tvec4 cga = texture2D(tDiffuse, vUv);\n\t\t\tvec4 cb = texture2D(tDiffuse, vUv - offset);\n\t\t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n\n\t\t}`\n\n};\n\nexport { RGBShiftShader };"},"lineCount":null}},"error":null,"hash":"28c12fdf81cbe9427f82f42224c36640","cacheData":{"env":{}}}